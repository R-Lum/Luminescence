
R version 4.4.1 Patched (2024-08-21 r87049) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "RLumShiny"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "RLumShiny-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('RLumShiny')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("app_RLum")
> ### * app_RLum
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: app_RLum
> ### Title: Run Luminescence shiny apps
> ### Aliases: app_RLum
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D # Dashboard
> ##D app_RLum()
> ##D 
> ##D # Plotting apps
> ##D app_RLum("abanico")
> ##D app_RLum("histogram")
> ##D app_RLum("KDE")
> ##D app_RLum("radialplot")
> ##D app_RLum("doserecovery")
> ##D 
> ##D # Further apps
> ##D app_RLum("cosmicdose")
> ##D app_RLum("transformCW")
> ##D app_RLum("filter")
> ##D app_RLum("fastratio")
> ##D app_RLum("fading")
> ##D app_RLum("surfaceexposure")
> ##D app_RLum("teststimulationpower")
> ##D app_RLum("scalegamma")
> ##D app_RLum("RCarb")
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("app_RLum", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("jscolorInput")
> ### * jscolorInput
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: jscolorInput
> ### Title: Create a JSColor picker input widget
> ### Aliases: jscolorInput
> 
> ### ** Examples
> 
> # html code
> jscolorInput("col", "Color", "21BF6B", slider = FALSE)
<p>Color</p>
<input id="col" value="21BF6B" class="color {hash:true, pickerPosition:&#39;bottom&#39;, pickerBorderColor:&#39;transparent&#39;, pickerFaceColor:&#39;transparent&#39;, pickerMode:&#39;HSV&#39;, slider:false, pickerClosable:false} shiny-bound-input" onchange="$(&#39;#col&#39;).trigger(&#39;afterChange&#39;)"/>
<script>$('#col').trigger('afterChange')</script>
> 
> # example app
> ## Not run: 
> ##D shinyApp(
> ##D ui = fluidPage(
> ##D   jscolorInput(inputId = "col", label = "JSColor Picker", 
> ##D                value = "21BF6B", position = "right", 
> ##D                mode = "HVS", close = TRUE),
> ##D   plotOutput("plot")
> ##D ),
> ##D server = function(input, output) {
> ##D   output$plot <- renderPlot({
> ##D     plot(cars, col = input$col, cex = 2, pch = 16)
> ##D  })
> ##D })
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("jscolorInput", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("popover")
> ### * popover
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: popover
> ### Title: Create a bootstrap button with popover
> ### Aliases: popover
> 
> ### ** Examples
> 
> # html code
> popover("title", "Some content")
<a tabindex="0" role="button" class="btn btn-default" data-toggle="popover" data-content="Some content" data-animation="TRUE" html="TRUE" data-placement="right" data-trigger="click">title</a>
> 
> # example app
> ## Not run: 
> ##D shinyApp(
> ##D ui = fluidPage(
> ##D   jscolorInput(inputId = "col", label = "JSColor Picker", 
> ##D                value = "21BF6B", position = "right", 
> ##D                mode = "HVS", close = TRUE),
> ##D   popover(title = "Help!", content = "Call 911"),
> ##D   plotOutput("plot")
> ##D ),
> ##D server = function(input, output) {
> ##D   output$plot <- renderPlot({
> ##D     plot(cars, col = input$col, cex = 2, pch = 16)
> ##D  })
> ##D })
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("popover", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("tooltip")
> ### * tooltip
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: tooltip
> ### Title: Create a bootstrap tooltip
> ### Aliases: tooltip
> 
> ### ** Examples
> 
> # javascript code
> tt <- tooltip("elementId", "This is a tooltip.")
> str(tt)
List of 1
 $ :List of 3
  ..$ name    : chr "head"
  ..$ attribs : Named list()
  ..$ children:List of 1
  .. ..$ :List of 3
  .. .. ..$ name    : chr "script"
  .. .. ..$ attribs : Named list()
  .. .. ..$ children:List of 1
  .. .. .. ..$ : 'html' chr "$(window).load(function(){ $('#elementId').tooltip({ html: true, \n                  trigger: 'hover', title: '"| __truncated__
  .. .. .. .. ..- attr(*, "html")= logi TRUE
  .. .. ..- attr(*, "class")= chr "shiny.tag"
  ..- attr(*, "class")= chr "shiny.tag"
 - attr(*, "class")= chr [1:2] "shiny.tag.list" "list"
> 
> # example app
> ## Not run: 
> ##D shinyApp(
> ##D ui = fluidPage(
> ##D   jscolorInput(inputId = "col", label = "JSColor Picker", 
> ##D                value = "21BF6B", position = "right", 
> ##D                mode = "HVS", close = TRUE),
> ##D   tooltip("col", "This is a JScolor widget"),
> ##D   
> ##D   checkboxInput("cbox", "Checkbox", FALSE),
> ##D   tooltip("cbox", "This is a checkbox"),
> ##D   
> ##D   checkboxGroupInput("cboxg", "Checkbox group", selected = "a", 
> ##D                      choices = c("a" = "a",
> ##D                                  "b" = "b",
> ##D                                  "c" = "c")),
> ##D   tooltip("cboxg", "This is a <b>checkbox group</b>", html = TRUE),
> ##D   
> ##D   selectInput("select", "Selectinput", selected = "a", choices = c("a"="a", "b"="b")),
> ##D   tooltip("select", "This is a text input field", attr = "for", placement = "right"),
> ##D   
> ##D   passwordInput("pwIn", "Passwordinput"),
> ##D   tooltip("pwIn", "This is a password input field"),
> ##D   
> ##D   plotOutput("plot")
> ##D ),
> ##D server = function(input, output) {
> ##D   output$plot <- renderPlot({
> ##D     plot(cars, col = input$col, cex = 2, pch = 16)
> ##D  })
> ##D })
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("tooltip", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.233 0.021 0.255 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
